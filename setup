#!/bin/bash

set -e

# Check if there is a preiously existing version of ernest
EXISTING=$(docker ps -q -f name=api-gateway)
if [[ $EXISTING = *[!\ ]* ]]; then
  echo "You already have an existing ernest instance running"
  echo "ernest will be upgraded to last version."
  TOKEN=$(docker exec $EXISTING sh -c 'echo "$JWT_SECRET"')
  CRYPTO_KEY=`docker exec $EXISTING sh -c 'echo "$ERNEST_CRYPTO_KEY"'`

  docker-compose down
  git checkout docker-compose.yml
  git checkout config/nginx/ernest.local
  git checkout master
  git pull
fi

command_exists () {
    if ! type "$1" &> /dev/null; then
        echo -e "\n\e[31m[FAIL]\e[39m Prerequisite requirements not met\n$1 not found!\nPlease make sure all requirements are installed."
        exit 1
    fi
}

echo -e "\n\e[34mErnest Setup Tool"
echo -e "=================\e[39m\n"

# input
while [[ -z $ERNESTHOSTNAME ]]; do
  echo -e -n "\e[34mHostname: \e[39m"
	read ERNESTHOSTNAME
done
while [[ -z $ERNESTUSER ]]; do
  echo -e -n "\e[34mUsername: \e[39m" 
	read ERNESTUSER
done
while [[ -z $ERNESTPASSWORD ]]; do
  echo -e -n "\e[34mPassword: \e[39m"
	read -s ERNESTPASSWORD
done

# prereqs
echo -e -n "\n\nChecking prerequisites... "
command_exists wget
command_exists openssl
command_exists docker
command_exists docker-compose
echo -e "\e[32mdone\e[39m\n"

echo -e "\e[32mStarting Ernest\e[39m\n"

# license
LICENSE=$1
if ! [[ -z "${LICENSE// }" ]]; then
  if [ ! -f $LICENSE ]; then
    echo -e "\e[33m[WARNING]\e[39m No license found\n"
    exit
  fi
fi

openssl req \
    -new \
    -newkey rsa:4096 \
    -days 365 \
    -nodes \
    -x509 \
    -subj "/C=UK/ST=London/L=London/O=ErnestIO/CN=$ERNESTHOSTNAME" \
    -keyout ./config/nginx/ernest.key \
    -out ./config/nginx/ernest.crt &> /dev/null

sed -i.bak "s/ERNESTHOSTNAME/$ERNESTHOSTNAME/g" ./config/nginx/ernest.local && rm ./config/nginx/ernest.local.bak

# Setup a random JWT Token for api-gateway
if [[ -z $TOKEN ]]; then
  echo "Generating new api token secret"
  TOKEN=`openssl rand -base64 32`
fi
sed -i.bak "s:GENERATEDJWTSECRET:$TOKEN:g" docker-compose.yml && rm docker-compose.yml.bak

# Setup a random CRIPTO_KEY
if [[ -z $CRYPTO_KEY ]]; then
  CRYPTO_KEY=`openssl rand -base64 24`
fi
sed -i.bak "s:CRYPTO_KEY_TEMPLATE:$CRYPTO_KEY:g" docker-compose.yml && rm docker-compose.yml.bak

# Make volume for postgres data
mkdir -p postgres/data

# run docker compose, add a '-d' to run in daemon mode
docker-compose up -d

# Download the natsc tool
wget https://s3-eu-west-1.amazonaws.com/ernest-tools/natsc-`uname` -O natsc &> /dev/null
chmod +x ./natsc

# NOTE: Wait for backend services to become available.
./natsc request -s nats://127.0.0.1:4222 -t 5 -r 99 'authorization.find' '{}' &> /dev/null
./natsc request -s nats://127.0.0.1:4222 -t 5 -r 99 'datacenter.find' '{}' &> /dev/null
# setup admin account
./natsc request -s nats://127.0.0.1:4222 -t 5 -r 99 'user.set' "{\"username\": \"$ERNESTUSER\", \"password\": \"$ERNESTPASSWORD\", \"admin\":true}" &> /dev/null

echo -e "\n\e[32mSetup complete!\e[39m\n"
echo -e "Please download the latest client from \e[34mhttps://github.com/ernestio/ernest-cli/releases\e[39m"
echo -e "Then configure with \e[34m'ernest-cli setup'\e[39m providing \e[34mhttps://$ERNESTHOSTNAME\e[39m as the target."
